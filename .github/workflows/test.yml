name: Test Examples

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y host curl

    # Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Test Python example
      run: python3 python/peppol_lookup.py

    # Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Test Node.js example
      run: node javascript/peppol-lookup.js

    # Java
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: Test Java example
      run: |
        cd java
        javac PeppolLookup.java
        java PeppolLookup

    # Go
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    - name: Test Go example
      run: |
        cd go
        go run peppol_lookup.go

    # PHP
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
    - name: Test PHP example
      run: php php/peppol_lookup.php

    # .NET
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
      env:
        DOTNET_INSTALL_DIR: '/home/runner/.dotnet'
    - name: Test C# example
      run: |
        cd csharp
        dotnet run

    # Bash
    - name: Test Bash example
      run: |
        chmod +x bash/peppol_lookup.sh
        ./bash/peppol_lookup.sh

    # PowerShell
    - name: Test PowerShell example
      run: pwsh powershell/peppol_lookup.ps1

    # Ruby
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
    - name: Test Ruby example
      run: |
        chmod +x ruby/peppol_lookup.rb
        ruby ruby/peppol_lookup.rb

    # Rust
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Test Rust example
      run: |
        cd rust
        cargo run

    # Verify output format
    - name: Verify all examples produce expected output format
      run: |
        # Function to test an example
        test_example() {
          local example=$1
          echo "Testing $example"
          
          # Run example and capture output
          output=$($example 2>&1)
          
          # Check for expected output
          if ! echo "$output" | grep -q "SMP hostname: b-e258de9dbe1f34f17b55d5d3cc5e7a66"; then
            echo "❌ $example did not produce expected SMP hostname"
            echo "Output was:"
            echo "$output"
            return 1
          fi
          
          if ! echo "$output" | grep -q "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice"; then
            echo "❌ $example did not find Invoice document type"
            echo "Output was:"
            echo "$output"
            return 1
          fi
          
          if ! echo "$output" | grep -q "urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2::CreditNote"; then
            echo "❌ $example did not find CreditNote document type"
            echo "Output was:"
            echo "$output"
            return 1
          fi
          
          echo "✅ $example passed"
          return 0
        }
        
        # Test each example and collect failures
        failures=()
        
        run_test() {
          local dir=$1
          local cmd=$2
          echo "Testing in directory: $dir"
          echo "Command: $cmd"
          
          # Save current directory
          pushd "$dir" > /dev/null
          
          if ! test_example "$cmd"; then
            failures+=("$dir: $cmd")
          fi
          
          # Restore directory
          popd > /dev/null
        }
        
        # Run all tests
        run_test "." "python3 python/peppol_lookup.py"
        run_test "." "node javascript/peppol-lookup.js"
        run_test "java" "javac PeppolLookup.java && java PeppolLookup"
        run_test "go" "go run peppol_lookup.go"
        run_test "." "php php/peppol_lookup.php"
        run_test "csharp" "dotnet run"
        run_test "." "./bash/peppol_lookup.sh"
        run_test "." "pwsh powershell/peppol_lookup.ps1"
        run_test "." "ruby ruby/peppol_lookup.rb"
        run_test "rust" "cargo run"
        
        # Report results
        if [ ${#failures[@]} -ne 0 ]; then
          echo "❌ The following tests failed:"
          printf '%s\n' "${failures[@]}"
          exit 1
        fi
        
        echo "✅ All tests passed!"
